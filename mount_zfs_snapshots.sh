#!/bin/bash

# ARG_POSITIONAL_SINGLE([dataset],[Parent ZFS dataset])
# ARG_POSITIONAL_SINGLE([snapshot],[Specific snapshot name to mount])
# ARG_OPTIONAL_SINGLE([mountpoint],[m],[Base mount point],[/mnt/snapshots])
# ARG_HELP([Mount or unmount ZFS snapshots recursively])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='mh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_mountpoint="/mnt/snapshots"


print_help()
{
	printf '%s\n' "Mount or unmount ZFS snapshots recursively"
	printf 'Usage: %s [-m|--mountpoint <arg>] [-h|--help] <dataset> <snapshot>\n' "$0"
	printf '\t%s\n' "<dataset>: Parent ZFS dataset"
	printf '\t%s\n' "<snapshot>: Specific snapshot name to mount"
	printf '\t%s\n' "-m, --mountpoint: Base mount point (default: '/mnt/snapshots')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-m|--mountpoint)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_mountpoint="$2"
				shift
				;;
			--mountpoint=*)
				_arg_mountpoint="${_key##--mountpoint=}"
				;;
			-m*)
				_arg_mountpoint="${_key##-m}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'dataset' and 'snapshot'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_dataset _arg_snapshot "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# vvv  PLACE YOUR CODE HERE  vvv

mount_snapshots() {
    local PARENT_DATASET="$1"
    local BASE_MOUNTPOINT="$2"
    local SNAPSHOT_NAME="$3"

    # Get the list of snapshots
    snapshots=$(zfs list -H -t snapshot -o name -r "${PARENT_DATASET}" | grep "@${SNAPSHOT_NAME}$")

    # Array to store mount commands
    declare -a mount_commands
    declare -a mountpoints

    # Loop through each snapshot and prepare mount commands
    while read -r snapshot; do
        # Extract the dataset path and snapshot name
        dataset_path=$(echo "$snapshot" | cut -d'@' -f1)
        snapshot_name=$(echo "$snapshot" | cut -d'@' -f2)

        # Check if the dataset has mountpoint set to legacy
        mountpoint_property=$(zfs get -H -o value mountpoint "$dataset_path")
        if [ "$mountpoint_property" = "legacy" ]; then
            echo "Skipping dataset $dataset_path with legacy mountpoint"
            continue
        fi

        # Create the mount point using the full dataset path
        if [ "$dataset_path" = "$PARENT_DATASET" ]; then
            # For the root dataset, use BASE_MOUNTPOINT directly
            mountpoint="$BASE_MOUNTPOINT"
        else
            relative_path=${dataset_path#$PARENT_DATASET/}
            mountpoint="${BASE_MOUNTPOINT}/${relative_path}"
        fi
        echo "Mountpoint: $mountpoint"

        # Prepare the mount command
        mount_command="mount -t zfs \"$snapshot\" \"$mountpoint\""
        echo "Mount command: $mount_command"

        # Store the mount command and mountpoint
        mount_commands+=("$mount_command")
        mountpoints+=("$mountpoint")
    done <<< "$snapshots"

    # Ask for confirmation to execute all mount commands
    read -p "Do you want to execute these mount commands? (y/n): " confirm



    if [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]]; then
        for i in "${!mount_commands[@]}"; do
            mountpoint="${mountpoints[$i]}"
            mount_command="${mount_commands[$i]}"

            # Mount the snapshot
            if eval "$mount_command"; then
                echo "Snapshot mounted on $mountpoint"
            else
                echo "Error mounting to $mountpoint"
            fi
        done
    else
        echo "Skipping all mounts"
    fi
}

# Main execution

 mount_snapshots "$_arg_dataset" "$_arg_mountpoint" "$_arg_snapshot"

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
