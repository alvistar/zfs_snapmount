#!/bin/bash

# ARG_POSITIONAL_SINGLE([dataset],[ZFS dataset to snapshot])
# ARG_POSITIONAL_SINGLE([snapshot_name],[Name of the snapshot])
# ARG_OPTIONAL_SINGLE([mountpoint],[m],[Mount point for the snapshot],[/mnt/snapshots])
# ARG_HELP([Create a ZFS snapshot of a dataset and optionally mount it])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='mh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_mountpoint="/mnt/snapshots"


print_help()
{
	printf '%s\n' "Create a ZFS snapshot of a dataset and optionally mount it"
	printf 'Usage: %s [-m|--mountpoint <arg>] [-h|--help] <dataset> <snapshot_name>\n' "$0"
	printf '\t%s\n' "<dataset>: ZFS dataset to snapshot"
	printf '\t%s\n' "<snapshot_name>: Name of the snapshot"
	printf '\t%s\n' "-m, --mountpoint: Mount point for the snapshot (default: '/mnt/snapshots')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-m|--mountpoint)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_mountpoint="$2"
				shift
				;;
			--mountpoint=*)
				_arg_mountpoint="${_key##--mountpoint=}"
				;;
			-m*)
				_arg_mountpoint="${_key##-m}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'dataset' and 'snapshot_name'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_dataset _arg_snapshot_name "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


set -e

if ! command -v zfs &> /dev/null; then
    echo "Error: zfs command not found. Please ensure ZFS is installed."
    exit 1
fi

echo "Creating recursive snapshot of $_arg_dataset with name $_arg_snapshot_name"

zfs snapshot "-r ${_arg_dataset}@${_arg_snapshot_name}"

echo "Snapshot created successfully: ${_arg_dataset}@${_arg_snapshot_name}"

# Mount the snapshot using mount_zfs_snapshots.sh if mountpoint is provided
echo "Mounting snapshot..."
mount_zfs_snapshots.sh "$_arg_dataset" "$_arg_snapshot_name" --mountpoint "$_arg_mountpoint"


# ] <-- needed because of Argbash
